/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os.files;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class NewJFrame extends javax.swing.JFrame {

    
    
   
    DefaultTableModel tblmodel;
    String dir;
    Scanner myFile = null;
    Scanner testfile = null;
    
    String Shortestindir="";
    String Longestindir="";
    boolean already1 =false;
    boolean already2 =false;
    ExecutorService executor;
    List<File> finalfilelist=new ArrayList<File>();
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jButton2.setEnabled(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Counting Files");
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File name", "Num of words", "Num of IS", "Num of Are", "Num of You", "Longest Word", "Shortest Word"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Include Subdirectories");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N
        jLabel3.setText("Shortest Word in the directory :");

        jLabel4.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N
        jLabel1.setText("Longest Word in the directory :");

        jLabel2.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jCheckBox1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addGap(7, 7, 7)
                .addComponent(jCheckBox1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
public void addfiletolist(File mainpath){
 File fileList[] = mainpath.listFiles();
                for (File file : fileList ) {                
                    if(file.isFile() && file.getName().endsWith(".txt")){
                        finalfilelist.add(file);
                        
                        if(!already1){
                    try {
                        testfile=new Scanner(file);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    while (testfile.hasNextLine()) {
                                String str = testfile.nextLine();
                                String[] arrOfStr = str.split(" ");
                                if(!already2) {
                                Shortestindir=arrOfStr[0];
                                already2 = true;
                                }}
                    already1 = true;
                    }
                    Object[] data = {file.getName(), 0, 0, 0, 0, null, null};
                    tblmodel = (DefaultTableModel) jTable1.getModel();
                    tblmodel.addRow(data);
                    }
                    else if(file.isDirectory()&&jCheckBox1.isSelected()){
                    addfiletolist(file);
                    
                    
                    }
                    
                }

}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Semaphore s=new Semaphore(1,true);
        if (jTextField1.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter your dir path!");
        } else {
            
           File directoryPath = new File(jTextField1.getText());
            if (directoryPath.exists() && directoryPath.isDirectory()) {
                            jButton1.setEnabled(false);
jButton2.setEnabled(true);

               addfiletolist(directoryPath);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++                
                 executor = Executors.newFixedThreadPool(5);
                for (File file : finalfilelist) {
                    Runnable readingfiles = new ReadingFiles(file) {
                        public void updategui(String filename, long count, long countis, long countare, long countyou, String shortest, String longest) {
                            SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    // Here, we can safely update the GUI
                                    // because we'll be called from the
                                    // event dispatch thread
                                    for (int i = 0; i < tblmodel.getRowCount(); i++) {
                                        if (tblmodel.getValueAt(i, 0).equals(filename)) {
                                            for (int j = 1; j <= 6; j++) {
                                                switch (j) {
                                                    case 1:
                                                        tblmodel.setValueAt(count, i, j);
                                                        break;
                                                    case 2:
                                                        tblmodel.setValueAt(countis, i, j);
                                                        break;
                                                    case 3:
                                                    tblmodel.setValueAt(countare, i, j);

                                                        break;
                                                    case 4:
                                                    tblmodel.setValueAt(countyou, i, j);

                                                        break;
                                                    case 5:
                                                         tblmodel.setValueAt(longest, i, j);
                                                         break;
                                                         case 6:
                                                         tblmodel.setValueAt(shortest, i, j);
                                                        break;
                                                }
                                            }
                                        }

                                    }

                                }

                            });

                        }

                        @Override
                        public void run() {
                            long countis = 0;
                            long count = 0;
                            long countare = 0;
                            long countyou = 0;
                            String longest = "";
                            String shortest="";
                            boolean alreadyExecuted=false;

                            try {
                                myFile = new Scanner(frommain); //if file doesnt exist it'll send error and this will be printed out
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(ReadingFiles.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            //keeps checking if the file has more lines
                            
                            while (myFile.hasNextLine()) {
                                String str = myFile.nextLine();
                                String[] arrOfStr = str.split(" ");
                                if(!alreadyExecuted) {
                                shortest=arrOfStr[0];
                                alreadyExecuted = true;
                                }
                                for (String a : arrOfStr) {
                                    
                                    count++;
                                    a = a.toLowerCase();
                                    switch (a) {
                                        case "is":
                                            countis++;
                                            break;
                                        case "are":
                                            countare++;
                                            break;
                                        case "you":
                                            countyou++;
                                            break;
                                    }
                                    if (a.length() >= longest.length()) {
                                        longest = a;
                                        try {
                                            s.acquire();
                                            if (longest.length() >= Longestindir.length()) {
                                                Longestindir = longest;
                                                  
                                                SwingUtilities.invokeLater(new Runnable() {
                                                    public void run() {
                                                         jLabel2.setText(Longestindir);
                                                    }
                                                });
                    }                            } catch (InterruptedException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                             s.release();
                                    }
                                    else if(a.length()<=shortest.length()){
                                    shortest=a;
                                        try {
                                            s.acquire();
                                            if (a.length() <= Shortestindir.length()) {
                                                Shortestindir = a;
  
                                                SwingUtilities.invokeLater(new Runnable() {
                                                    public void run() {
                                                         jLabel4.setText(Shortestindir);
                                                    }
                                                });
                    }                            } catch (InterruptedException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                             s.release();
                                    }
                                   
                                    updategui(frommain.getName(), count, countis, countare, countyou, shortest, longest);
                                    try {
                                        Thread.sleep(1000);
                                       
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                            
                        
                        }

                    };
                    executor.execute(readingfiles);
                    
                
                
                
                
                }
        executor.shutdown(); 
            
            } else {

                JOptionPane.showMessageDialog(this, "Your File does not exist!");

            }

        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       if(executor.isTerminated()){
       tblmodel.setRowCount(0);
       jLabel4.setText("");
       jTextField1.setText("");
       jLabel2.setText("");
           jButton1.setEnabled(true);
       jButton2.setEnabled(false);
       }
       else
                     JOptionPane.showMessageDialog(this, "Please wait, it is still processing!");
  
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
                
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}

//readingfile f=newreadinfile(){}